TERMINAL / BASH NOTES
* LINUX BASIC COMMANDS (sys admin interview)
  1) How can you see which kernel version a system is currently running?
**** uname -a (prints out system information) (hostname kernal etc etc)
  2) How can you check a system's current IP Address?
**** ifconfig (shows devices and addresses)
**** ip addr (newer version)
**** ip addr show [device](newer version)
  3) How do you check for free disk space?
**** df -ah (all file systems human readable formatting)
  4) How do you manage services on a system?
**** service [service name] status (old version)
**** systemctl status [service name]
  5) How would you check the size of a directory's contents on disk?
**** du -sh code/ (du = disk use)(-sh check the directory's total size)
**** du (shows the size of each file within the directory)
  6) How would you check for open ports on a Linux machine?
**** netstat
**** netstat -tulpn (most useful tags for checking ports)
**** sudo netstat -tulpn (use sudo to se program names)
  7) How do you check CPU usage for a process?
**** ps aux | grep [process name]
**** top (updated every second)
  8) htop (visual process monitoring in terminal)
**** htop
  9) Dealing with Mounts
**** ex. a usb drive
      - ls /mnt (where mounted devices go)
      - mount /dev/sda2 /mnt ([mount] [device] [where to mount it])
      - mount (no arguments to see existing mounts and fylesystem types)
**** /etc/fstab (directory if you need to automatically mount something at boot)
  10) How do you look up something you don't know?
**** man pages (man <command>)
  11) What do you do when you can't find an answer in a man page?
**** google
**** stack overflow

* Basic Concepts
** ARGUMENTS - Are separated by 'white space'
      - 'space' characters must be escaped if you want the space not to
        separate things. ex. 'john\ doe'
** RELATIVE / ABSOLUTE PATHS
      - If you are making a program that has to run in a situation where
        files may not be organized the same way, a relative path will end up
        breaking.  In this case an absolute path, or simply the name of the
        program will be a better choice.  Even in web developement, I think
        it may be prudent to design my website so that a simple
        re-organization of files doesn't break the entire website.  I suppose
        having a template for file organization could help with this too.
        More research is necessary in this case.
* Basic Commands
** mv [move]
      - 'sudo mv' (if you want to move a folder with contents)
      - no modifiers needed. It is already recursive
      - can be used to rename files

** <, >, << >> (double carrot 'appends' instead of overwriting.)
      - cat < hello.txt > hello2.txt (this will take the contents of the
        first file and print it within the second file)
** su (sudo su) [switch user]
      - 'sudo su' - if you want to switch to 'root' user. BE CAREFUL!
** tee (write to file AND stdout)
      - echo test | tee file.txt [this will output 'test' to file.txt and to
        stdout]
** xdg-open (open file with the proper program)
      - 'xdg-open text.txt' will open test.txt in text editor. If you only
        use 'open text.txt' it will use the terminal(probably?).
** variables
      - foo=bar (no spaces 'foo = bar' would not work.)
      - echo $foo (result= bar)
** strings
      - echo "hello world $foo" prints> hello world bar
      - echo 'hello world $foo' prings> hello world $foo
** running files
** grep
      - 
** find
      - 
* Scripting
* Paths?
* .bashrc / .zshrc
